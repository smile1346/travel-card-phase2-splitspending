// Generated by https://quicktype.io

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TransactionHistory
    {
        [JsonProperty("number")]
        public long Number { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("numberOfElements")]
        public long NumberOfElements { get; set; }

        [JsonProperty("content")]
        public Content[] Content { get; set; }

        [JsonProperty("first")]
        public bool First { get; set; }

        [JsonProperty("last")]
        public bool Last { get; set; }

        [JsonProperty("totalPages")]
        public long TotalPages { get; set; }

        [JsonProperty("totalElements")]
        public long TotalElements { get; set; }
    }

    public partial class Content
    {
        [JsonProperty("merchantId")]
        public object MerchantId { get; set; }

        [JsonProperty("customerId")]
        public object CustomerId { get; set; }

        [JsonProperty("nfcTagId")]
        public object NfcTagId { get; set; }

        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("receiptAdditionalDetails")]
        public object ReceiptAdditionalDetails { get; set; }

        [JsonProperty("salesId")]
        public long SalesId { get; set; }

        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }

        [JsonProperty("productId")]
        public object ProductId { get; set; }

        [JsonProperty("billerId")]
        public object BillerId { get; set; }

        [JsonProperty("pylId")]
        public object PylId { get; set; }

        [JsonProperty("paymentModeId")]
        public object PaymentModeId { get; set; }

        [JsonProperty("sourceAcctId")]
        public long SourceAcctId { get; set; }

        [JsonProperty("relatedAcctId")]
        public long RelatedAcctId { get; set; }

        [JsonProperty("bplId")]
        public object BplId { get; set; }

        [JsonProperty("transactionCCNumber")]
        public object TransactionCcNumber { get; set; }

        [JsonProperty("terminalId")]
        public object TerminalId { get; set; }

        [JsonProperty("contactMsisdn")]
        public object ContactMsisdn { get; set; }

        [JsonProperty("paymentType")]
        public PaymentTypeEnum PaymentType { get; set; }

        [JsonProperty("status")]
        public object Status { get; set; }

        [JsonProperty("message")]
        public Message Message { get; set; }

        [JsonProperty("duration")]
        public object Duration { get; set; }

        [JsonProperty("dateFallback")]
        public object DateFallback { get; set; }

        [JsonProperty("accountRefId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AccountRefId { get; set; }

        [JsonProperty("transactionRef")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TransactionRef { get; set; }

        [JsonProperty("balanceType")]
        public long BalanceType { get; set; }

        [JsonProperty("extSession")]
        public string ExtSession { get; set; }

        [JsonProperty("sourceRef")]
        public SourceRef SourceRef { get; set; }

        [JsonProperty("patternA")]
        public PatternAUnion PatternA { get; set; }

        [JsonProperty("patternB")]
        public PatternAUnion PatternB { get; set; }

        [JsonProperty("patternC")]
        public string PatternC { get; set; }

        [JsonProperty("workingAmount")]
        public double WorkingAmount { get; set; }

        [JsonProperty("workingAmountDisplay")]
        public string WorkingAmountDisplay { get; set; }

        [JsonProperty("sendingAmountExclFee")]
        public object SendingAmountExclFee { get; set; }

        [JsonProperty("receivedAmount")]
        public object ReceivedAmount { get; set; }

        [JsonProperty("fxRate")]
        public object FxRate { get; set; }

        [JsonProperty("totalFee")]
        public object TotalFee { get; set; }

        [JsonProperty("costToSend")]
        public object CostToSend { get; set; }

        [JsonProperty("balanceBefore")]
        public double BalanceBefore { get; set; }

        [JsonProperty("balanceAfter")]
        public double BalanceAfter { get; set; }

        [JsonProperty("balanceAfterDisplay")]
        public string BalanceAfterDisplay { get; set; }

        [JsonProperty("workingCurrencyUnit")]
        public WorkingCurrencyUnit WorkingCurrencyUnit { get; set; }

        [JsonProperty("workingCurrencySymbol")]
        public WorkingCurrencySymbol WorkingCurrencySymbol { get; set; }

        [JsonProperty("destinationCurrencyUnit")]
        public object DestinationCurrencyUnit { get; set; }

        [JsonProperty("destinationCurrencySymbol")]
        public object DestinationCurrencySymbol { get; set; }

        [JsonProperty("txType")]
        public PaymentTypeEnum TxType { get; set; }

        [JsonProperty("transactionTypeCode")]
        public TransactionTypeCode TransactionTypeCode { get; set; }

        [JsonProperty("billableEvent")]
        public long BillableEvent { get; set; }

        [JsonProperty("billableEvent2")]
        public long BillableEvent2 { get; set; }

        [JsonProperty("reversalOriginalTransactionId")]
        public long ReversalOriginalTransactionId { get; set; }

        [JsonProperty("transactionId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TransactionId { get; set; }

        [JsonProperty("utransactionId")]
        public object UtransactionId { get; set; }

        [JsonProperty("paymentTrailId")]
        public object PaymentTrailId { get; set; }

        [JsonProperty("originCode")]
        public string OriginCode { get; set; }

        [JsonProperty("destinationCode")]
        public string DestinationCode { get; set; }

        [JsonProperty("debitName")]
        public ItName DebitName { get; set; }

        [JsonProperty("creditName")]
        public ItName? CreditName { get; set; }

        [JsonProperty("externalAccount")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? ExternalAccount { get; set; }
    }

    public enum ItName { DefaultSuspense, SavinGg, Test, ThisIsAccountName };

    public enum Message { Empty, GetMySavings, TransactionAdjustmentFromAccount150ToAccount7501, TransactionAdjustmentFromAccount7501ToAccount150 };

    public enum PatternAEnum { Empty, The642164216421 };

    public enum PaymentTypeEnum { OperatorAdjustment, Transfer };

    public enum SourceRef { Android, Empty };

    public enum TransactionTypeCode { Cr, Dr };

    public enum WorkingCurrencySymbol { N };

    public enum WorkingCurrencyUnit { Nzd };

    public partial struct PatternAUnion
    {
        public PatternAEnum? Enum;
        public long? Integer;

        public static implicit operator PatternAUnion(PatternAEnum Enum) => new PatternAUnion { Enum = Enum };
        public static implicit operator PatternAUnion(long Integer) => new PatternAUnion { Integer = Integer };
    }

    public partial class TransactionHistory
    {
        public static TransactionHistory FromJson(string json) => JsonConvert.DeserializeObject<TransactionHistory>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TransactionHistory self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                ItNameConverter.Singleton,
                MessageConverter.Singleton,
                PatternAUnionConverter.Singleton,
                PatternAEnumConverter.Singleton,
                PaymentTypeEnumConverter.Singleton,
                SourceRefConverter.Singleton,
                TransactionTypeCodeConverter.Singleton,
                WorkingCurrencySymbolConverter.Singleton,
                WorkingCurrencyUnitConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class ItNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ItName) || t == typeof(ItName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Default Suspense":
                    return ItName.DefaultSuspense;
                case "Savin gg":
                    return ItName.SavinGg;
                case "Test":
                    return ItName.Test;
                case "This is Account Name":
                    return ItName.ThisIsAccountName;
            }
            throw new Exception("Cannot unmarshal type ItName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ItName)untypedValue;
            switch (value)
            {
                case ItName.DefaultSuspense:
                    serializer.Serialize(writer, "Default Suspense");
                    return;
                case ItName.SavinGg:
                    serializer.Serialize(writer, "Savin gg");
                    return;
                case ItName.Test:
                    serializer.Serialize(writer, "Test");
                    return;
                case ItName.ThisIsAccountName:
                    serializer.Serialize(writer, "This is Account Name");
                    return;
            }
            throw new Exception("Cannot marshal type ItName");
        }

        public static readonly ItNameConverter Singleton = new ItNameConverter();
    }

    internal class MessageConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Message) || t == typeof(Message?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Message.Empty;
                case "Get my savings":
                    return Message.GetMySavings;
                case "Transaction adjustment from account 150 to account 7501":
                    return Message.TransactionAdjustmentFromAccount150ToAccount7501;
                case "Transaction adjustment from account 7501 to account 150":
                    return Message.TransactionAdjustmentFromAccount7501ToAccount150;
            }
            throw new Exception("Cannot unmarshal type Message");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Message)untypedValue;
            switch (value)
            {
                case Message.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Message.GetMySavings:
                    serializer.Serialize(writer, "Get my savings");
                    return;
                case Message.TransactionAdjustmentFromAccount150ToAccount7501:
                    serializer.Serialize(writer, "Transaction adjustment from account 150 to account 7501");
                    return;
                case Message.TransactionAdjustmentFromAccount7501ToAccount150:
                    serializer.Serialize(writer, "Transaction adjustment from account 7501 to account 150");
                    return;
            }
            throw new Exception("Cannot marshal type Message");
        }

        public static readonly MessageConverter Singleton = new MessageConverter();
    }

    internal class PatternAUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PatternAUnion) || t == typeof(PatternAUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "":
                            return new PatternAUnion { Enum = PatternAEnum.Empty };
                        case "642164216421":
                            return new PatternAUnion { Enum = PatternAEnum.The642164216421 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new PatternAUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type PatternAUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (PatternAUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case PatternAEnum.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case PatternAEnum.The642164216421:
                        serializer.Serialize(writer, "642164216421");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type PatternAUnion");
        }

        public static readonly PatternAUnionConverter Singleton = new PatternAUnionConverter();
    }

    internal class PatternAEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PatternAEnum) || t == typeof(PatternAEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return PatternAEnum.Empty;
                case "642164216421":
                    return PatternAEnum.The642164216421;
            }
            throw new Exception("Cannot unmarshal type PatternAEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PatternAEnum)untypedValue;
            switch (value)
            {
                case PatternAEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case PatternAEnum.The642164216421:
                    serializer.Serialize(writer, "642164216421");
                    return;
            }
            throw new Exception("Cannot marshal type PatternAEnum");
        }

        public static readonly PatternAEnumConverter Singleton = new PatternAEnumConverter();
    }

    internal class PaymentTypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PaymentTypeEnum) || t == typeof(PaymentTypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Operator Adjustment":
                    return PaymentTypeEnum.OperatorAdjustment;
                case "Transfer":
                    return PaymentTypeEnum.Transfer;
            }
            throw new Exception("Cannot unmarshal type PaymentTypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PaymentTypeEnum)untypedValue;
            switch (value)
            {
                case PaymentTypeEnum.OperatorAdjustment:
                    serializer.Serialize(writer, "Operator Adjustment");
                    return;
                case PaymentTypeEnum.Transfer:
                    serializer.Serialize(writer, "Transfer");
                    return;
            }
            throw new Exception("Cannot marshal type PaymentTypeEnum");
        }

        public static readonly PaymentTypeEnumConverter Singleton = new PaymentTypeEnumConverter();
    }

    internal class SourceRefConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SourceRef) || t == typeof(SourceRef?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return SourceRef.Empty;
                case "ANDROID":
                    return SourceRef.Android;
            }
            throw new Exception("Cannot unmarshal type SourceRef");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SourceRef)untypedValue;
            switch (value)
            {
                case SourceRef.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case SourceRef.Android:
                    serializer.Serialize(writer, "ANDROID");
                    return;
            }
            throw new Exception("Cannot marshal type SourceRef");
        }

        public static readonly SourceRefConverter Singleton = new SourceRefConverter();
    }

    internal class TransactionTypeCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TransactionTypeCode) || t == typeof(TransactionTypeCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "CR":
                    return TransactionTypeCode.Cr;
                case "DR":
                    return TransactionTypeCode.Dr;
            }
            throw new Exception("Cannot unmarshal type TransactionTypeCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TransactionTypeCode)untypedValue;
            switch (value)
            {
                case TransactionTypeCode.Cr:
                    serializer.Serialize(writer, "CR");
                    return;
                case TransactionTypeCode.Dr:
                    serializer.Serialize(writer, "DR");
                    return;
            }
            throw new Exception("Cannot marshal type TransactionTypeCode");
        }

        public static readonly TransactionTypeCodeConverter Singleton = new TransactionTypeCodeConverter();
    }

    internal class WorkingCurrencySymbolConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WorkingCurrencySymbol) || t == typeof(WorkingCurrencySymbol?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "N$")
            {
                return WorkingCurrencySymbol.N;
            }
            throw new Exception("Cannot unmarshal type WorkingCurrencySymbol");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WorkingCurrencySymbol)untypedValue;
            if (value == WorkingCurrencySymbol.N)
            {
                serializer.Serialize(writer, "N$");
                return;
            }
            throw new Exception("Cannot marshal type WorkingCurrencySymbol");
        }

        public static readonly WorkingCurrencySymbolConverter Singleton = new WorkingCurrencySymbolConverter();
    }

    internal class WorkingCurrencyUnitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WorkingCurrencyUnit) || t == typeof(WorkingCurrencyUnit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "NZD")
            {
                return WorkingCurrencyUnit.Nzd;
            }
            throw new Exception("Cannot unmarshal type WorkingCurrencyUnit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WorkingCurrencyUnit)untypedValue;
            if (value == WorkingCurrencyUnit.Nzd)
            {
                serializer.Serialize(writer, "NZD");
                return;
            }
            throw new Exception("Cannot marshal type WorkingCurrencyUnit");
        }

        public static readonly WorkingCurrencyUnitConverter Singleton = new WorkingCurrencyUnitConverter();
    }
}
