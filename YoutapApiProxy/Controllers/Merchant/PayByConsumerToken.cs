using Microsoft.AspNetCore.Mvc;
using System.Net;
using Swashbuckle.AspNetCore.Annotations;

using Swashbuckle.AspNetCore.Filters;
using Examples;
using System.Net.Mime;
using System.Text.Json.Serialization;

namespace Controllers
{

    readonly partial struct Merchant
    {
        // OK
        [ProducesResponseType(typeof(PayByConsumerTokenResponseModel.Root), (int)HttpStatusCode.OK)]
        [SwaggerResponseExample((int)HttpStatusCode.OK, typeof(PayByConsumerTokenResponseExample))]

        // Bad Request
        [ProducesResponseType(typeof(ClientErrorResponseModel.Root), (int)HttpStatusCode.BadRequest)]
        [SwaggerResponseExample((int)HttpStatusCode.BadRequest, typeof(PayByConsumerTokenResponseBadRequestExample))]

        // Not Found
        [ProducesResponseType(typeof(ClientErrorResponseModel.Root), (int)HttpStatusCode.NotFound)]
        [SwaggerResponseExample((int)HttpStatusCode.NotFound, typeof(PayByConsumerTokenResponseNotFoundExample))]

        // Request Body
        [Consumes(typeof(PayByConsumerTokenRequestModel.Root), MediaTypeNames.Application.Json)]
        [SwaggerRequestExample(typeof(PayByConsumerTokenRequestModel.Root), typeof(PayByConsumerTokenRequestExample))]

        [SwaggerOperation(Summary = "[B-scan-C] Purchase By Scanning Consumer QR code", Description = @"
The merchant scans the QR code generated by the consumer, then sends the data read from the code to the endpoint.")]
        public static IResult PayByConsumerToken(
        [SwaggerParameter("The `Customer Number` of the merchant, as shown in CMS portal.")] string merchantId,
        [SwaggerParameter("The `Account Number` of the merchant, as shown in CMS portal.")] string accountId,
        [FromHeader(Name = "x-jws-signature")][SwaggerParameter("JSON Web Signature (JWS) used for message integrity verification.")] string signature,
        [FromHeader(Name = "Idempotency-Key")][SwaggerParameter("Unique key that the server uses to recognize subsequent retries of the same request to avoid the accidental creation of duplicate transactions.")] string idempotencyKey)
        {
            var result = File.ReadAllText(@"examples/Webhook_LowBalance.json");
            return Results.Text(result, MediaTypeNames.Application.Json);
        }

    }
}